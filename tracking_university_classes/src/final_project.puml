@startuml
class University {
    -List<Teacher> teachers
    -List<Student> students
    -List<UniversityClass> classes
    +addTeacher(Teacher)
    +printAllProfessors():String name
    +printAllClasses():String
    +createStudent(name: String, id: String, age: int, className: String)
    +createClass(name: String, classroom: String, teacher: Teacher, students: List<Student>)
    +listClasses():String
    +listTeachers():String
    +listClassesByStudentId(id: String)
    +listStudentLists():String
    +addStudentToClass(String name, (String cName))

}

abstract class Teacher {
    -name: String
    -baseSalaryPerHour: double
    -totalSalary : double
    -subject: String
    +setName(String name)
    +getName():String
    +setSubject(String subject)
    +getSubject():String
    +abstract calculateTotalSalary(int hours, double baseSalaryPerHour): double
    +toString():String

}

class FullTimeTeacher extends Teacher {
    -experienceYears: int
    -{static} HOURS_PER_MONTH: int
    +setExperienceYears(double yearsOfExperience)
    +getExperienceYears(): double
}

class PartTimeTeacher extends Teacher {
    -activeHoursPerWeek: int
    -salaryPerWeek: double
    +calculateSalaryPerWeek(): void
}

class Student {
    -name: String
    -{Static}ID: Int
    -idAux: Int
    -age: int
    +getName():String
    +setName(String name)
    +setAge(Int age)
    +getAge():Int
    -setID(int)
    -generateID():int
    +toString(): String
}

class Class {
    -className: String
    -classroom: String
    -teacher: Teacher
    -students: List<Student>
    +setClassName(String cName)
    +getClassName(): String
    +setTeacher(Teacher)
    +getTeacher():Teacher
    +toString():String
}

University "1" *-- "many" Teacher
University "1" *-- "many" Student
University "1" *-- "many" Class
Class "1" *-- "1" Teacher
Class "many" *-- "many" Student
@enduml